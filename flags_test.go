// Code generated by astiav. DO NOT EDIT.
package astiav
import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestBuffersinkFlags(t *testing.T) {
	fs := NewBuffersinkFlags(BuffersinkFlag(1))
	require.True(t, fs.Has(BuffersinkFlag(1)))
	fs = fs.Add(BuffersinkFlag(2))
	require.True(t, fs.Has(BuffersinkFlag(2)))
	fs = fs.Del(BuffersinkFlag(2))
	require.False(t, fs.Has(BuffersinkFlag(2)))
}

func TestBuffersrcFlags(t *testing.T) {
	fs := NewBuffersrcFlags(BuffersrcFlag(1))
	require.True(t, fs.Has(BuffersrcFlag(1)))
	fs = fs.Add(BuffersrcFlag(2))
	require.True(t, fs.Has(BuffersrcFlag(2)))
	fs = fs.Del(BuffersrcFlag(2))
	require.False(t, fs.Has(BuffersrcFlag(2)))
}

func TestCodecContextFlags(t *testing.T) {
	fs := NewCodecContextFlags(CodecContextFlag(1))
	require.True(t, fs.Has(CodecContextFlag(1)))
	fs = fs.Add(CodecContextFlag(2))
	require.True(t, fs.Has(CodecContextFlag(2)))
	fs = fs.Del(CodecContextFlag(2))
	require.False(t, fs.Has(CodecContextFlag(2)))
}

func TestCodecContextFlags2(t *testing.T) {
	fs := NewCodecContextFlags2(CodecContextFlag2(1))
	require.True(t, fs.Has(CodecContextFlag2(1)))
	fs = fs.Add(CodecContextFlag2(2))
	require.True(t, fs.Has(CodecContextFlag2(2)))
	fs = fs.Del(CodecContextFlag2(2))
	require.False(t, fs.Has(CodecContextFlag2(2)))
}

func TestCodecHardwareConfigMethodFlags(t *testing.T) {
	fs := NewCodecHardwareConfigMethodFlags(CodecHardwareConfigMethodFlag(1))
	require.True(t, fs.Has(CodecHardwareConfigMethodFlag(1)))
	fs = fs.Add(CodecHardwareConfigMethodFlag(2))
	require.True(t, fs.Has(CodecHardwareConfigMethodFlag(2)))
	fs = fs.Del(CodecHardwareConfigMethodFlag(2))
	require.False(t, fs.Has(CodecHardwareConfigMethodFlag(2)))
}

func TestDictionaryFlags(t *testing.T) {
	fs := NewDictionaryFlags(DictionaryFlag(1))
	require.True(t, fs.Has(DictionaryFlag(1)))
	fs = fs.Add(DictionaryFlag(2))
	require.True(t, fs.Has(DictionaryFlag(2)))
	fs = fs.Del(DictionaryFlag(2))
	require.False(t, fs.Has(DictionaryFlag(2)))
}

func TestFilterCommandFlags(t *testing.T) {
	fs := NewFilterCommandFlags(FilterCommandFlag(1))
	require.True(t, fs.Has(FilterCommandFlag(1)))
	fs = fs.Add(FilterCommandFlag(2))
	require.True(t, fs.Has(FilterCommandFlag(2)))
	fs = fs.Del(FilterCommandFlag(2))
	require.False(t, fs.Has(FilterCommandFlag(2)))
}

func TestFormatContextFlags(t *testing.T) {
	fs := NewFormatContextFlags(FormatContextFlag(1))
	require.True(t, fs.Has(FormatContextFlag(1)))
	fs = fs.Add(FormatContextFlag(2))
	require.True(t, fs.Has(FormatContextFlag(2)))
	fs = fs.Del(FormatContextFlag(2))
	require.False(t, fs.Has(FormatContextFlag(2)))
}

func TestFormatContextCtxFlags(t *testing.T) {
	fs := NewFormatContextCtxFlags(FormatContextCtxFlag(1))
	require.True(t, fs.Has(FormatContextCtxFlag(1)))
	fs = fs.Add(FormatContextCtxFlag(2))
	require.True(t, fs.Has(FormatContextCtxFlag(2)))
	fs = fs.Del(FormatContextCtxFlag(2))
	require.False(t, fs.Has(FormatContextCtxFlag(2)))
}

func TestFormatEventFlags(t *testing.T) {
	fs := NewFormatEventFlags(FormatEventFlag(1))
	require.True(t, fs.Has(FormatEventFlag(1)))
	fs = fs.Add(FormatEventFlag(2))
	require.True(t, fs.Has(FormatEventFlag(2)))
	fs = fs.Del(FormatEventFlag(2))
	require.False(t, fs.Has(FormatEventFlag(2)))
}

func TestIOContextFlags(t *testing.T) {
	fs := NewIOContextFlags(IOContextFlag(1))
	require.True(t, fs.Has(IOContextFlag(1)))
	fs = fs.Add(IOContextFlag(2))
	require.True(t, fs.Has(IOContextFlag(2)))
	fs = fs.Del(IOContextFlag(2))
	require.False(t, fs.Has(IOContextFlag(2)))
}

func TestIOFormatFlags(t *testing.T) {
	fs := NewIOFormatFlags(IOFormatFlag(1))
	require.True(t, fs.Has(IOFormatFlag(1)))
	fs = fs.Add(IOFormatFlag(2))
	require.True(t, fs.Has(IOFormatFlag(2)))
	fs = fs.Del(IOFormatFlag(2))
	require.False(t, fs.Has(IOFormatFlag(2)))
}

func TestOptionSearchFlags(t *testing.T) {
	fs := NewOptionSearchFlags(OptionSearchFlag(1))
	require.True(t, fs.Has(OptionSearchFlag(1)))
	fs = fs.Add(OptionSearchFlag(2))
	require.True(t, fs.Has(OptionSearchFlag(2)))
	fs = fs.Del(OptionSearchFlag(2))
	require.False(t, fs.Has(OptionSearchFlag(2)))
}

func TestPacketFlags(t *testing.T) {
	fs := NewPacketFlags(PacketFlag(1))
	require.True(t, fs.Has(PacketFlag(1)))
	fs = fs.Add(PacketFlag(2))
	require.True(t, fs.Has(PacketFlag(2)))
	fs = fs.Del(PacketFlag(2))
	require.False(t, fs.Has(PacketFlag(2)))
}

func TestSeekFlags(t *testing.T) {
	fs := NewSeekFlags(SeekFlag(1))
	require.True(t, fs.Has(SeekFlag(1)))
	fs = fs.Add(SeekFlag(2))
	require.True(t, fs.Has(SeekFlag(2)))
	fs = fs.Del(SeekFlag(2))
	require.False(t, fs.Has(SeekFlag(2)))
}

func TestSoftwareScaleContextFlags(t *testing.T) {
	fs := NewSoftwareScaleContextFlags(SoftwareScaleContextFlag(1))
	require.True(t, fs.Has(SoftwareScaleContextFlag(1)))
	fs = fs.Add(SoftwareScaleContextFlag(2))
	require.True(t, fs.Has(SoftwareScaleContextFlag(2)))
	fs = fs.Del(SoftwareScaleContextFlag(2))
	require.False(t, fs.Has(SoftwareScaleContextFlag(2)))
}

func TestStreamEventFlags(t *testing.T) {
	fs := NewStreamEventFlags(StreamEventFlag(1))
	require.True(t, fs.Has(StreamEventFlag(1)))
	fs = fs.Add(StreamEventFlag(2))
	require.True(t, fs.Has(StreamEventFlag(2)))
	fs = fs.Del(StreamEventFlag(2))
	require.False(t, fs.Has(StreamEventFlag(2)))
}
